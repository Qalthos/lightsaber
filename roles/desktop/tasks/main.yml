---
- name: Install common desktop packages
  ansible.builtin.package:
    name:
      - kanshi
      - sddm
      - sway
      - swaybg
      - swayidle
      - swaylock
      - waybar
      - rofi
      - xdg-desktop-portal-gtk
      - xdg-desktop-portal-wlr
      - xdg-user-dirs
      - grim
      - slurp
      # Theming
      - papirus-icon-theme
      # Applications
      - engrampa
      - firefox
      - flatpak
      - imv
      - kitty
      - mpv
      - thunar
      - xed
      - xreader
    state: installed
  become: true

- name: Install desktop on Arch
  ansible.builtin.package:
    name:
      - swaync
      - polkit-gnome
      - borg
      # Fonts
      - otf-font-awesome
      - ttf-fira-code
      - ttf-firacode-nerd
      - ttf-noto-nerd
      - noto-fonts-cjk
      - noto-fonts-emoji
    state: installed
  become: true
  when: ansible_os_family == "Archlinux"

- name: Install desktop on Red Hat
  ansible.builtin.package:
    name:
      - borgbackup
      # Fonts
      - fira-code-fonts
      - google-noto-emoji-fonts
      - google-noto-sans-cjk-fonts
    state: installed
  become: true
  when: ansible_os_family == "RedHat" and ansible_pkg_mgr != "atomic_container"

- name: Install uv tools
  ansible.builtin.command:
    cmd: uv tool install {{ item }}
  register: desktop_uv
  loop:
    - borgmatic
    - waypaper
  changed_when:
    - '"is already installed" not in desktop_uv.stdout'

- name: Add the flathub flatpak repository remote to the user installation
  community.general.flatpak_remote:
    name: flathub
    state: present
    flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
    method: user

- name: Install flatpaks
  community.general.flatpak:
    name:
      - com.github.tchx84.Flatseal
      - hu.irl.cameractrls
      - org.keepassxc.KeePassXC
      - org.mozilla.Thunderbird
      - org.pipewire.Helvum
    method: user
    state: present

- name: Ensure accountservice path exists
  ansible.builtin.file:
    path: /var/lib/AccountsService/icons
    mode: ug=rwx,o=rx
    state: directory

- name: Set up user avatar
  ansible.builtin.copy:
    src: avatar.png
    dest: "/var/lib/AccountsService/icons/{{ ansible_user }}"
    mode: u=rw,g=r,o=r
  become: true

- name: Create user directories
  ansible.builtin.file:
    path: "~/{{ item }}"
    mode: u=rwX,g=rX,o=rX
    state: directory
  loop:
    - files/desktop
    - files/documents
    - files/downloads
    - media/music
    - media/pictures
    - media/videos

- name: Create .config directory tree
  ansible.builtin.file:
    path: ~/.config/{{ item.path }}
    mode: u=rwx,g=rx,o=rx
    state: directory
  loop: "{{ query('filetree', 'config/') }}"
  when: item.state == 'directory'
  tags:
    - dotfiles

- name: Copy .config directory
  ansible.builtin.copy:
    src: config/{{ item.path }}
    dest: ~/.config/{{ item.path }}
    mode: u=rw,g=r,o=r
  loop: "{{ query('filetree', 'config/') }}"
  when: item.state == 'file'
  tags:
    - dotfiles

- name: Copy helper scripts
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: ~/.local/bin/
    mode: preserve
  loop: "{{ query('fileglob', 'bin/*') }}"

- name: Ensure user services dir exists
  ansible.builtin.file:
    path: ~/.config/systemd/user/
    mode: u=rwx,g=rx,o=rx
    state: directory

- name: Install user services
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: ~/.config/systemd/user/
    mode: preserve
  loop: "{{ query('fileglob', 'services/*') }}"
  notify: Reload systemd

- name: Ensure services are available
  ansible.builtin.meta: flush_handlers

- name: Enable services
  ansible.builtin.systemd_service:
    name: "{{ item }}"
    enabled: true
    scope: user
  loop:
    - borgmatic.timer
    - kanshi.service
    - sway-xdg-autostart.target
